

				Set 1

1.Find the subString:
       Save the string “WELCOMETOZOHOCORPORATION” in a two dimensional array and 
search for substring like “too” in the two dimensional string 
both from left to right and from top to bottom.


Coding:

package set1;

import java.util.Arrays;
import java.util.Scanner;

public class FindSubString {

	public static void main(String[] args) {
		FindSubString obj = new FindSubString();
		obj.start();
	}

	private void start() {
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter the string: ");
		String str = scan.next();
		System.out.println("Enter the substring: ");
		String substr = scan.next();
		int l = substr.length();
		int c = 0;
		char[][] charArr = new char[5][5];
		boolean flag = false;
		for (int i = 0; i < charArr.length; i++) {
			for (int j = 0; j < charArr[i].length; j++) {
				if (str.length() == c) {
					flag = true;
					break;
				}
				charArr[i][j] = str.charAt(c++);
			}
			if (flag) {
				break;
			}
		}

		for (int i = 0; i < charArr.length; i++) {
			for (int j = 0; j < charArr[i].length; j++) {
				if (substr.charAt(0) == charArr[i][j]) {
					if (checkRight(i, j, substr, charArr)) {
						System.out.println("Start index: <" + i + " ,  " + j + ">");
						System.out.println("End index: <" + i + " ,  " + (j + substr.length()) + ">");
					}
					if (checkBottom(i, j, substr, charArr)) {
						System.out.println("Start index: <" + i + " ,  " + j + ">");
						System.out.println("End index: <" + (i + substr.length() - 1) + " ,  " + j + ">");
					}
				}
			}

		}
		for (int i = 0; i < charArr.length; i++) {
			System.out.println(Arrays.toString(charArr[i]));
		}
	}

	private boolean checkRight(int i, int j, String substr, char[][] charArr) {
		int l = j + substr.length(), c = 0, count = 0;
		if (l < charArr.length) {
			for (int k = j; k < l; k++) {
				if (charArr[i][k] == substr.charAt(c++)) {
					count++;
				}
			}
			if (count == substr.length()) {
				return true;
			}
		}
		return false;
	}

	private boolean checkBottom(int i, int j, String substr, char[][] charArr) {
		int l = i + substr.length(), c = 0, count = 0;
		if (l < charArr.length) {
			for (int k = i; k < l; k++) {
				if (charArr[k][j] == substr.charAt(c++)) {
					count++;
				}
			}
			if (count == substr.length()) {
				return true;
			}
		}
		return false;
	}

}


2.Find Grand Child:

Given a two dimensional array of string like

  <”luke”, “shaw”>
  <”wayne”, “rooney”>
  <”rooney”, “ronaldo”>
  <”shaw”, “rooney”> 

Where the first string is “child”, second string is “Father”. And given “ronaldo” 
we have to find his no of grandchildren Here “ronaldo” has 2 grandchildren. So our output should be 2.

Coding:

package set1;

import java.util.Scanner;

public class GrantChild {

	public static void main(String[] args) {
		GrantChild obj=new GrantChild();
		obj.start();
	}

	private void start() {
		Scanner scan=new Scanner(System.in);
//		System.out.println("Enter the number of family: ");
//		
//		int n=scan.nextInt();
		String[][] arr=new String[][] {{"luke","shaw"},{"waynee","rooney"},{"rooney","ronaldo"},{"shaw","rooney"}};
		System.out.println("Enter the grand child: ");
		String str=scan.next();
		System.out.println(findChild(str,arr));
		
		
	}

	private int findChild(String str, String[][] arr) {
		int count=0;
		String p="";
		for(int i=0;i<arr.length;i++) {
			for(int j=0;j<arr[i].length;j++) {
				if(arr[i][j].equals(str)) {
					p=arr[i][0];
				}
			}
		}
		for(int k=0;k<arr.length;k++) {
			if(arr[k][1].equals(p)) {
				count++;
			}
		}
		return count;
	}

}


3.Pattern:
Print the word with odd letters as

P         M
 R      A
   O  R
     G
  O    R
 R       A
P          M 

Coding:

package set1;

import java.util.Scanner;

public class Pattern {
	public static void main(String[] args) {
		Pattern obj=new Pattern();
		Scanner scan=new Scanner(System.in);
		System.out.println("Enter the String: ");
		String str=scan.next();
		obj.start(str);
	}

	private void start(String str) {
		int l=str.length();
		
		for(int i=0;i<l;i++) {
			for(int j=0;j<l;j++) {
				if(i==j ||  i+j==l-1) {
					System.out.print(str.charAt(j));
				}
				
				else {
					System.out.print(" ");
				}
			}
			System.out.println();
		}
	}
}

4.Sort based on weights:

package set1;

import java.util.Arrays;

public class SortBasedOnWeights {

	public static void main(String[] args) {
		SortBasedOnWeights obj=new SortBasedOnWeights();
		obj.start();
	}

	private void start() {
		int[] arr=new int[] {10,36,54,89,12};
		int[] weight =new int[arr.length];
		
		for(int i=0;i<weight.length;i++) {
			weight[i]=getWeight(arr[i]);
		}
		System.out.println(Arrays.toString(weight));
		sort(arr,weight);
		
		System.out.println(Arrays.toString(weight));
		System.out.println(Arrays.toString(arr));
	}

	private void sort(int[] arr, int[] weight) {
		for(int i=0;i<weight.length-1;i++) {
			for(int j=i+1;j<weight.length;j++) {
				if(weight[i]>weight[j]) {
					int temp=weight[i];
					weight[i]=weight[j];
					weight[j]=temp;
					
					int temp2=arr[i];
					arr[i]=arr[j];
					arr[j]=temp2;
				}
			}
		}
	}

	private int getWeight(int num) {
		int sum=0;
		for(int i=1;i<num/2;i++) {
			if(num==i*i) {
				sum+=5;
			}
		}
		if(num%2==0) {
			sum+=3;
		}
		if(num%6==0 && num%4==0) {
			sum+=4;
		}
		
		return sum;
	}

}


5.Sudoku Solver:

package set1;

public class SudokuSolver {

	public static void main(String[] args) {
		SudokuSolver obj=new SudokuSolver();
		char[][] board = new char[][] { 	{ '3','.', '6', '5', '.', '8', '4', '.', '.' }, 
			{ '5', '2', '.', '.', '.', '.', '.', '.', '.'},
			{ '.', '8', '7', '.', '.', '.', '.', '3', '1' }, 
			{ '.', '.', '3', '.', '1', '.', '.', '8', '.' },
			{ '9', '.', '.', '8', '6', '3', '.', '.', '5'},
			{ '.', '5', '.', '.', '9', '.', '6', '.', '.' }, 
			{ '1', '3', '.', '.', '.', '.', '2', '5', '.' }, 
			{ '.', '.', '.', '.', '.', '.', '.', '7', '4' },
			{ '.', '.', '5', '2', '.', '6', '3', '.', '.' }
		};


		if(obj.solveSudoku(board)) {
			obj.display(board);
		}
		else {
			System.out.println("Sudoku can't solve");
		}
	}

	private void display(char[][] board) {
		for(char[] row:board) {
			for(char element:row) {
				System.out.print(element+" ");
			}
			System.out.println();
		}
	}

	private boolean solveSudoku(char[][] board) {
		int row=-1,col=-1;
		boolean emptyLeft=true;
		for(int i=0;i<board.length;i++) {
			for(int j=0;j<board[i].length;j++) {
				if(board[i][j]=='.') {
					row=i;
					col=j;
					emptyLeft=false;
				}
				if(!emptyLeft) {
					break;
				}
			}
			if(!emptyLeft) {
				break;
			}
		}
		if(emptyLeft) {
			return true;
		}
		
		for(int num=1;num<=9;num++) {
			char value=(char)(num+48);
			if(isSafe(board,value,row,col)) {
				board[row][col]=value;
				if(solveSudoku(board)) {
					return true;
				}
				else {
					board[row][col]='.';
				}
			}
		}
		
		return false;
	}

	private boolean isSafe(char[][] board, char value, int row, int col) {
		for(int i=0;i<board.length;i++) {
			if(board[row][i]==value) {
				return  false;
			}
		}
		
		for(int i=0;i<board.length;i++) {
			if(board[i][col]==value) {
				return  false;
			}
		}
		
		int sqrt=(int)Math.sqrt(board.length);
		
		int rowStart=row-row%sqrt;
		int colStart=col-col%sqrt;
		
		for(int r=rowStart;r<rowStart+sqrt;r++) {
			for(int c=colStart;c<colStart+sqrt;c++) {
				if(board[r][c]==value) {
					return false;
				}
			}
		}
		
		return true;
	}

}


				SET 2

1.Alternate Sorting:

package set2;

import java.util.Arrays;

public class AlternateSorting {

	public static void main(String[] args) {
		AlternateSorting obj = new AlternateSorting();
		int[] arr = new int[] { 7, 1, 2, 3, 4, 5, 6 };
		obj.alternateSort(arr);
		

	}

	private void alternateSort(int[] arr) {
		Arrays.sort(arr);
		int len=arr.length-1,i=0;
		int[] resArr=new int[len+1];
		int c=0;
		while(i<len) {
			resArr[c++]=arr[len--];
			resArr[c++]=arr[i++];
		}
		
		if(arr.length%2==1) {
			resArr[c]=arr[arr.length/2];
		}
		System.out.println(Arrays.toString(resArr));
	}

}


2.Evaluate expression: 

package JanAssignments;

import java.util.Scanner;
import java.util.Stack;

public class ExpusingStack {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String input = sc.nextLine();
		Stack<Character> stack = new Stack<>();
		
		for (int i = 0; i < input.length(); i++) {
			if (input.charAt(i) == ')') {
				if (stack.peek() != '(') {
					System.out.println("invalid");
					return;
				}
				stack.pop();
			} else if (input.charAt(i) == '+' || input.charAt(i) == '-' || input.charAt(i) == '*'
					|| input.charAt(i) == '/') {
				if (!checkVariable(stack.peek()) || !checkVariable(input.charAt(i + 1))) {
					System.out.println("invalid");
					return;
				} else {
					stack.pop();
					i++;
				}
			} else {
				stack.push(input.charAt(i));
			}
		}
		if (stack.isEmpty()) {
			System.out.println("valid");
			return;
		}
		System.out.println("invalid");

	}

	private static boolean checkVariable(char c) {
		if (c >= 'a' && c <= 'z') {
			return true;
		}
		return false;
	}

}

3.Find Nth Number:

package set2;

import java.util.LinkedList;
import java.util.Queue;

public class FindNthNumber {

	public static void main(String[] args) {
		int n = 5;
		System.out.println("Input: " + n);
		String result = getNthNumber(n);
		System.out.println("Output: " + result);
	}
	public static String getNthNumber(int n) {
        if (n <= 0) {
            return "";
        }
        
        Queue<String> queue = new LinkedList<>();
        
        queue.add("3");
        queue.add("4");
        
        for (int i = 1; i < n; i++) {
            String current = queue.poll();
            queue.add(current + "3");
            queue.add(current + "4");
        }
        
        return queue.poll();
     }
}

4.Remove Unbalanced paranthesis:

package set2;

import java.util.*;
public class RemoveUnbalancedParantheses {

	public static void main(String[] args) {
		String exp = "((abc)((de))";
		System.out.println("Input: " + exp);
		String result = removeUnbalancedParentheses(exp);
		System.out.println("Output: " + result);

		exp = "(((ab)";
		System.out.println("Input: " + exp);
		result = removeUnbalancedParentheses(exp);
		System.out.println("Output: " + result);
	}

	public static String removeUnbalancedParentheses(String exp) {
		if (exp == null || exp.isEmpty()) {
			return exp;
		}

		StringBuilder sb = new StringBuilder(exp);
		Stack<Integer> stack = new Stack<>();

		// Adding indices of unbalanced parentheses to the stack
		for (int i = 0; i < exp.length(); i++) {
			char c = exp.charAt(i);
			if (c == '(') {
				stack.push(i);
			} else if (c == ')') {
				if (!stack.isEmpty() && exp.charAt(stack.peek()) == '(') {
					stack.pop();
				} else {
					stack.push(i);
				}
			}
		}

		// Removing unbalanced parentheses from the expression
		while (!stack.isEmpty()) {
			int index = stack.pop();
			sb.deleteCharAt(index);
		}
		System.out.println(sb);
		return sb.toString();
	}
}

				Set 3

1.Merge two sorted arrays:

package set2;

import java.util.*;
public class RemoveUnbalancedParantheses {

	public static void main(String[] args) {
		String exp = "((abc)((de))";
		System.out.println("Input: " + exp);
		String result = removeUnbalancedParentheses(exp);
		System.out.println("Output: " + result);

		exp = "(((ab)";
		System.out.println("Input: " + exp);
		result = removeUnbalancedParentheses(exp);
		System.out.println("Output: " + result);
	}

	public static String removeUnbalancedParentheses(String exp) {
		if (exp == null || exp.isEmpty()) {
			return exp;
		}

		StringBuilder sb = new StringBuilder(exp);
		Stack<Integer> stack = new Stack<>();

		// Adding indices of unbalanced parentheses to the stack
		for (int i = 0; i < exp.length(); i++) {
			char c = exp.charAt(i);
			if (c == '(') {
				stack.push(i);
			} else if (c == ')') {
				if (!stack.isEmpty() && exp.charAt(stack.peek()) == '(') {
					stack.pop();
				} else {
					stack.push(i);
				}
			}
		}

		// Removing unbalanced parentheses from the expression
		while (!stack.isEmpty()) {
			int index = stack.pop();
			sb.deleteCharAt(index);
		}
		System.out.println(sb);
		return sb.toString();
	}
}
 
2.Print count:

package set3;

import java.util.Scanner;

public class PrintCount {

	public static void main(String[] args) {
		PrintCount obj=new PrintCount();
		obj.start();
	}

	private void start() {
		Scanner scan=new Scanner(System.in);
		System.out.println("Enter the string: ");
		String str="a10b3";
		String temp="";
		for(int i=0;i<str.length();i++) {
			
			int count=0;
			if(i<str.length() && (int)str.charAt(i)>=48 &&  (int)str.charAt(i)<=57) {
				count=(int)str.charAt(i)-48;
				if(i+1<str.length() && (int)str.charAt(i+1)>=48 &&  (int)str.charAt(i+1)<=57) {
					i++;
					count=count*10+(int)str.charAt(i)-48;
					for(int k=0;k<count;k++) {
						System.out.print(temp);
					}
					temp="";
				}
				else {
					for(int k=0;k<count;k++) {
						System.out.print(temp);
					}
					temp="";
				}
			}
			else {
				temp+=str.charAt(i);
			}
		}
	}

}


4.Reverse the String:

package set3;
import java.util.Arrays;
import java.util.Scanner;

public class ReverseString {

	public static void main(String[] args) {
		ReverseString obj=new ReverseString();
		obj.start();
	}

	private void start() {
		Scanner scan=new Scanner(System.in);
		String str="I Love India";
		String[] strArr=str.split(" ");
		reverse(strArr,0);
		System.out.println(Arrays.toString(strArr));
		
		reverse2(str,str.length()-1,str.length());
	}

	private void reverse(String[] strArr,int index) {
		if(index==strArr.length) {
			return;
		}
		reverse(strArr,index+1);
		System.out.println(strArr[index]);
	}
	
	private void reverse2(String str,int s,int e) {
		if(s==0) {
			System.out.println(str.substring(s,e));
			return;
		}
		if(str.charAt(s)==' ') {
			System.out.println(str.substring(s+1,e));
			reverse2(str,s-1,s);
			return;
		}
		reverse2(str,--s,e);
	}

}


			SET 4

1.Next Greatest Element:

package set4;

import java.util.Arrays;

public class NextGreatestElemment {

	public static void main(String[] args) {
		NextGreatestElemment obj=new NextGreatestElemment();
		obj.start();
	}

	private void start() {
		int[] arr=new int[] {5,4,3,2,1,0};
		int[] ansArr=new int[arr.length];
		Arrays.fill(ansArr,-1);
		
		for(int i=ansArr.length-2;i>=0;i--) {
			if(arr[i+1]>ansArr[i+1]) {
				ansArr[i]=arr[i+1];
			}
			else {
				ansArr[i]=ansArr[i+1];
			}
		}
		System.out.println(Arrays.toString(ansArr));
	}

}


2.Odd Even SOrting:

package set4;

import java.util.ArrayList;
import java.util.List;

public class OddEvenSorting {

	public static void main(String[] args) {
		OddEvenSorting obj = new OddEvenSorting();
		obj.start();
	}

	private void start() {
		int[] arr = new int[] { 1, 2, 3, 5, 4, 7, 10 };
		List<Integer> oddNums = new ArrayList<>();
		List<Integer> evenNums = new ArrayList<>();
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] % 2 == 1) {
				oddNums.add(arr[i]);
			} else {
				evenNums.add(arr[i]);
			}
		}
		oddSort(oddNums);
		evenSort(evenNums);
		List<Integer> mergeArr =new ArrayList<>();
		mergeArr.addAll(oddNums);
		mergeArr.addAll(evenNums);
		System.out.println(mergeArr);
	}

	private void evenSort(List<Integer> nums) {
		for (int i = 0; i < nums.size() - 1; i++) {
			for (int j = i + 1; j < nums.size(); j++) {
				if (nums.get(i) > nums.get(j)) {
					int temp = nums.get(i);

					nums.set(i, nums.get(j));
					nums.set(j, temp);
				}
			}
		}
	}

	private void oddSort(List<Integer> nums) {
		for (int i = 0; i < nums.size() - 1; i++) {
			for (int j = i + 1; j < nums.size(); j++) {
				if (nums.get(i) < nums.get(j)) {
					int temp = nums.get(i);

					nums.set(i, nums.get(j));
					nums.set(j, temp);
				}
			}
		}
	}

}

3.Pattern XO:

package set4;

import java.util.ArrayList;
import java.util.List;

public class OddEvenSorting {

	public static void main(String[] args) {
		OddEvenSorting obj = new OddEvenSorting();
		obj.start();
	}

	private void start() {
		int[] arr = new int[] { 1, 2, 3, 5, 4, 7, 10 };
		List<Integer> oddNums = new ArrayList<>();
		List<Integer> evenNums = new ArrayList<>();
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] % 2 == 1) {
				oddNums.add(arr[i]);
			} else {
				evenNums.add(arr[i]);
			}
		}
		oddSort(oddNums);
		evenSort(evenNums);
		List<Integer> mergeArr =new ArrayList<>();
		mergeArr.addAll(oddNums);
		mergeArr.addAll(evenNums);
		System.out.println(mergeArr);
	}

	private void evenSort(List<Integer> nums) {
		for (int i = 0; i < nums.size() - 1; i++) {
			for (int j = i + 1; j < nums.size(); j++) {
				if (nums.get(i) > nums.get(j)) {
					int temp = nums.get(i);

					nums.set(i, nums.get(j));
					nums.set(j, temp);
				}
			}
		}
	}

	private void oddSort(List<Integer> nums) {
		for (int i = 0; i < nums.size() - 1; i++) {
			for (int j = i + 1; j < nums.size(); j++) {
				if (nums.get(i) < nums.get(j)) {
					int temp = nums.get(i);

					nums.set(i, nums.get(j));
					nums.set(j, temp);
				}
			}
		}
	}

}

4.SUBSQUARE SUM:

package set4;

import java.util.ArrayList;
import java.util.List;

public class SubsquareSum {
	
	List<Integer>subSquareSum=new ArrayList<>();
	public static void main(String[] args) {
		SubsquareSum obj=new SubsquareSum();
		obj.start();
		
	}

	private void start() {
		int[][]  matrix1= {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};
		int[][] matrix= {{1,2,3},{4,5,6},{7,8,9}};
		for(int dis=0;dis<matrix.length-2;dis++) {
			for(int i=0;i<matrix.length-1-dis;i++) {
				for(int j=0;j<matrix[0].length-1-dis;j++) {
					findSubSquare(matrix,i,j,dis);
				}
			}
		}
		
		System.out.println(subSquareSum);
		
	}

	private void findSubSquare(int[][] matrix, int i, int j,int dis) {
		int temp=0;
		for(int startrow=i;startrow<=i+dis+1;startrow++) {			
			for(int startcol=j;startcol<=j+dis+1;startcol++) {
				temp+=matrix[startrow][startcol];
			}
		}
		subSquareSum.add(temp);
	}
}

5.UpgradingOrDowngrading:

package set4;

public class UpgradeOrDownGrade {

	public static void main(String[] args) {
		UpgradeOrDownGrade obj=new UpgradeOrDownGrade();
		obj.start();
	}

	private void start() {
		String version1="4.9.2";
		String version2="4.8.4";
		
		for(int i=0;i<version2.length();i+=2) {
			if((int)version1.charAt(i)<(int)version2.charAt(i)) {
				System.out.println("Upgraded");
				return;
			}
			else if((int)version1.charAt(i)>(int)version2.charAt(i)) {
				System.out.println("Downgraded");
				return;
			}
		}
	}

}

6.Z traversal:

package set4;

import java.util.ArrayList;
import java.util.List;

public class Ztraversal {

	public static void main(String[] args) {
		Ztraversal obj=new Ztraversal();
		obj.start();
	}

	private void start() {
		int[][] matrix=new int[][] {{1,2,3},{4,5,6},{7,8,9}};
		List<Integer> traversal=new ArrayList<>();
		for(int i=0;i<matrix.length;i++) {
			for(int j=matrix[0].length-1;j>=0;j--) {
				if(i==0 || i==matrix.length-1) {
					traversal.add(matrix[i][j]);
				}
				else if(i==j && i!=0 && i!=matrix.length-1) {
					traversal.add(matrix[i][j]);
				}
			}
		}
		System.out.println(traversal);
	}

}


				SET 5

1.Decimal to Hexa:

package set6;

import java.util.Scanner;

public class DecimalToHexa {

	public static void main(String[] args) {
		DecimalToHexa obj=new DecimalToHexa();
		obj.start();
	}

	private void start() {
		Scanner scan =new Scanner(System.in);
		int n=scan.nextInt();
		
		String temp="";
		if(n/16>0) {
			temp+=n/16;
			n%=16;
			if(n<9) {
				temp+=n;
			}
			else {
				if(n==9) {
					temp+="A";
				}
				else if(n==10) {
					temp+="B";
				}
				else if(n==11) {
					temp+="C";
				}
				else if(n==12) {
					temp+="D";
				}
				else if(n==13) {
					temp+="E";
				}
				else if(n==14) {
					temp+="F";
				}
				else if(n==15) {
					temp+="G";
				}
			}
		}
		else {
			if(n<9) {
				temp+=n;
			}
			else {
				if(n==9) {
					temp+="A";
				}
				else if(n==10) {
					temp+="B";
				}
				else if(n==11) {
					temp+="C";
				}
				else if(n==12) {
					temp+="D";
				}
				else if(n==13) {
					temp+="E";
				}
				else if(n==14) {
					temp+="F";
				}
				else if(n==15) {
					temp+="G";
				}
			}
		}
		
		System.out.println(temp);
	}

}

2.Fibonacci:

package set6;
import java.util.Scanner;
public class Fibonacci {
	public static void main(String[] args) {
		Fibonacci  obj= new Fibonacci();
		obj.start();
	}

	private void start() {
		Scanner scan=new Scanner(System.in);
		int n=scan.nextInt();		
		int a=0,b=1,i=0;		
		while(i<n) {
			System.out.print(a+ " ");
			int c=a+b;
			a=b;
			b=c;
			i++;
		}
	}

}


3.Minimum Jumb:

package set6;

import java.util.Scanner;

public class MinimumJumb {

	public static void main(String[] args) {
		MinimumJumb obj = new MinimumJumb();
		obj.start();
	}

	private void start() {
		Scanner scan=new Scanner(System.in);
		int n=scan.nextInt();
		
		int[] arr=new int[n];
		
		System.out.println("Enter the array elements: ");
		for(int i=0;i<n;i++) {
			arr[i]=scan.nextInt();
		}
		
		int minJumb[] =new int[n];
		minJumb[0]=0;
		for(int i=1;i<n;i++) {
			minJumb[i]=Integer.MAX_VALUE;
			for(int j=0;j<i;j++) {
				if(j+arr[j]>=i && minJumb[j]!=Integer.MAX_VALUE) {
					minJumb[i]=Math.min(minJumb[i], minJumb[j]+1);
				}
			}
		}
		System.out.println(minJumb[n-1]);
	}

}

4.Move Zero At end:

package set6;

import java.util.Arrays;
import java.util.Scanner;

public class MoveZeroAtEnd {

	public static void main(String[] args) {
		MoveZeroAtEnd obj=new MoveZeroAtEnd();
		obj.start();
		
	}

	private void start() {
		Scanner scan=new Scanner(System.in);
		int n=scan.nextInt();
		
		int[] arr=new int[n];
		
		System.out.println("Enter the array elements: ");
		for(int i=0;i<n;i++) {
			arr[i]=scan.nextInt();
		}
		
		int i=0,j=1;
		
		while(j<n) {
			if(arr[i]==0) {
				if(arr[j]!=0) {
					int temp=arr[i];
					arr[i]=arr[j];
					arr[j]=temp;	
					i++;
					j++;
				}		
				else {
					j++;
				}
			}
			else {
				i++;
				j++;
			}
		}
		
		System.out.println(Arrays.toString(arr));
	}

}


5.Right SHift:

package set6;

import java.util.Arrays;
import java.util.Scanner;

public class RightShift {

	public static void main(String[] args) {
		RightShift obj=new RightShift();
		obj.start();
	}

	private void start() {
		Scanner scan=new Scanner(System.in);
		int n=scan.nextInt();
		
		int[] arr=new int[n];
		
		System.out.println("Enter the array elements: ");
		for(int i=0;i<n;i++) {
			arr[i]=scan.nextInt();
		}
		System.out.println("Enter k: ");
		int k=scan.nextInt();
		shift(arr,k);
		
	}

	private void shift(int[] arr, int k) {
		reverse(arr,0,arr.length-k-1);
		reverse(arr,arr.length-k+1,arr.length-1);
		reverse(arr,0,arr.length-1);
		
		System.out.println(Arrays.toString(arr));
		
	}
	
	private void reverse(int[] arr,int start,int end) {
		while(start<end) {
			int temp=arr[start];
			arr[start]=arr[end];
			arr[end]=temp;
			start++;
			end--;
		}
	}

}


6.Stair Case:

package set6;

import java.util.Scanner;

public class StairCase {

	public static void main(String[] args) {
		StairCase obj =new StairCase();
		obj.start();
	}

	private void start() {
		Scanner scan=new Scanner(System.in);
		int n=scan.nextInt();
		
		int ans=findPosibility(n);
		System.out.println(ans);
	}

	private int findPosibility(int n) {
		if(n<=2) {
			return n;
		}
		return findPosibility(n-1)+findPosibility(n-2);
	}

}

7.Zigzag Sort:

package set6;

import java.util.Arrays;
import java.util.Scanner;

public class ZigzagAlternate {

	public static void main(String[] args) {
		ZigzagAlternate obj=new ZigzagAlternate();
		obj.start();
	}

	private void start() {
		Scanner scan=new Scanner(System.in);
		int n=scan.nextInt();
		
		int[] arr=new int[n];
		
		System.out.println("Enter the array elements: ");
		for(int i=0;i<n;i++) {
			arr[i]=scan.nextInt();
		}
		
		zigzag(arr);
		System.out.println(Arrays.toString(arr));
	}

	private void zigzag(int[] arr) {
		boolean flag=true;
		
		for(int i=0;i<arr.length-1;i++) {
			if(flag) {
				if(arr[i]>arr[i+1]) {
					int temp=arr[i];
					arr[i]=arr[i+1];
					arr[i+1]=temp;
				}
				flag=false;
			}
			else {
				if(arr[i]<arr[i+1]) {
					int temp=arr[i];
					arr[i]=arr[i+1];
					arr[i+1]=temp;
				}
				flag=true;
			}
		}
	}

}




