


			Array Problems

1.Add one:

package arrayProblems;

import java.util.Arrays;

public class AddOne {

	public static void main(String[] args) {
		AddOne obj=new AddOne();
		obj.start();
		
	}

	private void start() {
		int[] arr= {2,9,9};
		int i=arr.length-1;
		while(i>=0) {
			if(arr[i]!=9) {
				arr[i]=arr[i]+1;
				System.out.println(Arrays.toString(arr));
				return;
			}
			arr[i]=0;
			i--;
		}
		
		int[] res=new int[arr.length+1];
		res[0]=1;
		
		System.out.println(Arrays.toString(res));
	}

}

2.Burst balloons:

package arrayProblems;

public class BurstBalloons {

	public static void main(String[] args) {
		BurstBalloons obj=new BurstBalloons();
		obj.start();
	}

	private void start() {
		int[][] arr = {{10,16},{2,8},{1,6},{7,12}};
		
		int arrow=arr.length;
		
		for(int i=1;i<arr.length;i++) {
			if(isMatch(i,arr)) {
				arrow--;
			}
		}
		System.out.println(arrow);
	}

	private boolean isMatch(int index, int[][] arr) {
		for(int i=0;i<arr.length;i++) {
			if(i!=index) {
				if(arr[index][0]>arr[i][0] && arr[index][0]<=arr[i][1]) {
					return true;
				}
			}
		}
		return false;
	}

}


3.Count Index:

package arrayProblems;

public class CountIndex {

	public static void main(String[] args) {
		CountIndex obj=new CountIndex();
		obj.start();
	}

	private void start() {
		int[] arr={1,4,7,8,8,11,11,11,11,12,13};
		int target=11;
		int firstIndex=findFirstIndex(arr,target);
		int lastIndex=findLastIndex(arr,target);
		
		System.out.println((lastIndex-firstIndex)+1);
	}

	private int findLastIndex(int[] arr, int target) {
		int index=-1;
		int start=0;
		int end=arr.length-1;
		
		while(start<end) {
			int mid=(start+end)/2;
			
			if(arr[mid]==target) {
				index=mid;
				start=mid+1;
			}
			else if(arr[mid]<target) {
				start=mid+1;
			}
			else {
				end=mid-1;
			}
		}
		
		return index;
	}

	private int findFirstIndex(int[] arr, int target) {
		int index=-1;
		int start=0;
		int end=arr.length-1;
		
		while(start<end) {
			int mid=(start+end)/2;
			
			if(arr[mid]==target) {
				index=mid;
				end=mid-1;
			}
			else if(arr[mid]<target) {
				start=mid+1;
			}
			else {
				end=mid-1;
			}
		}
		
		return index;
	}

}

4.Find Missing Numbers:

package arrayProblems;

import java.util.Arrays;

public class FindMissingNumbers {

	public static void main(String[] args) {
		FindMissingNumbers obj=new FindMissingNumbers();
		obj.start();
	}

	private void start() {
		int[] arr= {4,3,2,7,8,2,3,1};
	
		// Get the number and find the index and change the value to negative
		for(int num:arr) {
			int index= Math.abs(num)-1;
			if(arr[index]>0) {
				arr[index]=-arr[index];
			}		
		}
		// By using positive number we can get the number
		System.out.println(Arrays.toString(arr));
		for(int i=0;i<arr.length;i++) {
			if(arr[i]>0) {
				System.out.print(i+1+"  ");
			}
		}
	}
}

5.Find triplets:

package arrayProblems;

import java.util.Arrays;

public class FindTriplets {

	public static void main(String[] args) {
		FindTriplets obj=new FindTriplets();
		obj.start();
	}

	private void start() {
		int[] arr= {1,4,45,6,10,8};
		int k=13;
		
		Arrays.sort(arr);
		
		for(int i=0;i<arr.length;i++) {
			int start=i+1;
			int end=arr.length-1;
			
			while(start<end) {
				if(arr[i]+arr[start]+arr[end] == k) {
					System.out.println(true);
					return ;
				}
				else if(arr[i]+arr[start]+arr[end] < k) {
					start++;
				}
				else {
					end--;
				}
			}
			
		}
	}
}

6.Group anagrams:

package arrayProblems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupAnagrams {

	public static void main(String[] args) {
		GroupAnagrams obj=new GroupAnagrams();
		obj.start();
	}

	private void start() {
		String[] arr= {"eat","tan","tea","ate","nat"};		
		Map<Integer,List<String>> map=new HashMap<>();
		
		for(int i=0;i<arr.length;i++) {
			int sum=0;
			for(int j=0;j<arr[i].length();j++) {
				sum+=(int)arr[i].charAt(j);
			}
			if(map.containsKey(sum)) {
				map.get(sum).add(arr[i]);
			}
			else {
				map.put(sum, new ArrayList<>(Arrays.asList(arr[i])));
			}
		}
		for(Map.Entry<Integer, List<String>> entry:map.entrySet()) {
			System.out.println(entry.getValue());
		}	
	}
}

7.Largest sub array with equal  number of 1's and 0's:

package arrayProblems;

import java.util.HashMap;
import java.util.Map;

public class LargestSubArrayWithEqual1s_and0s {

	public static void main(String[] args) {
		LargestSubArrayWithEqual1s_and0s obj=new LargestSubArrayWithEqual1s_and0s();
		obj.start();
	}

	private void start() {
		int [] arr= {1,0,1,1,1,0,0};
		
		Map<Integer,Integer> mp=new HashMap<>();
		mp.put(0, -1);
		
		int sum=0;
		int maxLen=0;
		
		for(int i=0;i<arr.length;i++) {
			if(arr[i]==0) {
				sum += -1;
			}
			else {
				sum += 1;
			}
			
			if(mp.containsKey(sum)) {
				maxLen=Math.max(maxLen, i-mp.get(sum));
			}else {
				mp.put(sum, i);
			}
		}		
		System.out.println(maxLen);
	}
}


8.Longest increasing sub array:

package arrayProblems;

public class LongestIncreasingSubArray {

	public static void main(String[] args) {
		LongestIncreasingSubArray obj=new LongestIncreasingSubArray();
		obj.start();
	}

	private void start() {
		int[] arr= {10,23,1,5,4,7,8,10,19,11};
		
		int len=1,maxLen=1;
		
		for(int i=1;i<arr.length;i++) {
			if(arr[i]>arr[i-1]) {
				len++;
			}
			else {
				len=1;
			}
			maxLen=Math.max(maxLen, len);
		}
		System.out.println(maxLen);
		
	}

}


9.Maximum difference:

package arrayProblems;

public class MaximumDiff {

	public static void main(String[] args) {
		MaximumDiff obj=new MaximumDiff();
		obj.start();
	}

	private void start() {
		int[] arr= {5,15,6,4,27,2};
		int min=arr[0],maxDiff=arr[1]-arr[0];
		for(int i=1;i<arr.length;i++) {
			
			if(arr[i]-min>maxDiff){
				maxDiff=arr[i]-min;
			}
			if(min>arr[i]) {
				min=arr[i];
			}
		}
		System.out.println(maxDiff);
	}

}

10.Maximum sub array sum:

package arrayProblems;

public class MaximumSubArraySum {

	public static void main(String[] args) {
		MaximumSubArraySum obj=new MaximumSubArraySum();
		obj.start();
	}

	private void start() {
//		int[] arr= {1,2,-5,4,3,8,5};
		int[] arr= {-2,-1};
		int currSum=arr[0],maxSum=arr[0],start=0,end=0;
		
		for(int i=1;i<arr.length;i++) {
			if(currSum<0) {
				currSum=arr[i];
				start=i;
				end=i;
			}
			else {
				currSum+=arr[i];
				end=i;
			}
			maxSum=Math.max(maxSum, currSum);
		}
		for(int i=start;i<=end;i++) {
			System.out.print(arr[i]+" ");
		}
		System.out.println();

		System.out.println(maxSum);
	}

}


11.Maximum sub arrray with k:

package arrayProblems;

public class MaximumSubArrayWithK {

	public static void main(String[] args) {
		MaximumSubArrayWithK obj=new MaximumSubArrayWithK();
		obj.start();
	}

	private void start() {
		int[] arr= {2,1,5,1,3,2};
		int k=3,maxSum=0;
		
		for(int i=0;i<arr.length-k;i++) {
			int sum=0;
			for(int j=i;j<i+k;j++) {
				sum+=arr[j];
			}
			if(sum>maxSum) {
				maxSum=sum;
			}
		}
		System.out.println(maxSum);
	}

}


15.Minimum sub array length:

package arrayProblems;

public class minSubArrayLength {

	public static void main(String[] args) {
		minSubArrayLength obj=new minSubArrayLength();
		obj.start();
	}

	private void start() {
		int[] arr= {7,2,1,1,6,5};
		int k=11;
		
		int length=minSubArrayLength(arr,k);
		
		System.out.println(length);
	}

	private int minSubArrayLength(int[] arr, int k) {
		int start=0;
		int sum=0;
		int minLength=Integer.MAX_VALUE;
		for(int end=0;end<arr.length;end++) {
			
			sum=sum + arr[end];
			
			while(sum>=k && start<=end) {
				if(sum==k) {
					minLength=Math.min(minLength, (end-start)+1);
				}
				sum=sum-arr[start++];
			}
		}
		
		return minLength==Integer.MAX_VALUE?0:minLength;
	}

}

16.Peak  element:

package arrayProblems;

public class PeakElement {

	public static void main(String[] args) {
		PeakElement obj=new PeakElement();
		obj.start();
	}

	private void start() {
		int[] arr=new int[] {2,3,4,7,5};
		int i=arr.length-2,peak=arr[arr.length-1],max=arr[arr.length-1];
		while(i>-1) {
			if(max<arr[i] && arr[i]>peak) {
				peak=arr[i];
				max=arr[i];
			}
			i--;
		}
		System.out.println(peak);
	}

}


18.Remove duplicates:

package arrayProblems;

import java.util.Arrays;

public class RemoveDuplicates {

	public static void main(String[] args) {
		RemoveDuplicates obj=new RemoveDuplicates();
		obj.start();
	}

	private void start() {
		int[] arr= {5,5,4,6,4,4,5};
		
		int j=0;
		Arrays.sort(arr);
		for(int i=1;i<arr.length;i++) {
			if(arr[i]!=arr[j]) {
				j++;
				arr[j]=arr[i];
			}
		}
		for(int k=0;k<=j;k++) {
			System.out.print(arr[k]+" ");
		}
	}

}

19.Rotate By k:

package arrayProblems;

import java.util.Arrays;

public class RotateByK {

	public static void main(String[] args) {
		RotateByK obj=new RotateByK();
		obj.start();
	}

	private void start() {
		int[] arr= {1,2,3,4,5,6,7};
		int k=3;
		
		reverse(arr,0,arr.length-k-1);
		reverse(arr,arr.length-k,arr.length-1);
		reverse(arr,0,arr.length-1);
		System.out.println(Arrays.toString(arr));
	}

	private void reverse(int[] arr, int start, int end) {
		
		while(start<end) {
			int temp=arr[start];
			arr[start]=arr[end];
			arr[end]=temp;
			start++;
			end--;
		}
	}

}

19.Search in rotate array:

package arrayProblems;

public class SearchInRotatedArray {

	public static void main(String[] args) {
		SearchInRotatedArray obj=new SearchInRotatedArray();
		obj.start();
	}

	private void start() {
		int[] arr= {4,5,6,7,-1,0,1,2};
		int target=0;
		
		int start=0,end=arr.length-1;
		
		while(start<end) {
			int mid=(start+end)/2;
			
			if(arr[mid]==target) {
				System.out.println(mid);
				return;
			}
			
			if( arr[start]<=arr[mid] ) {
				if(target >= arr[start] && target<=arr[mid]) {
					end=mid-1;
				}
				else {
					start=mid+1;
				}
			}
			else {
				if(target >= arr[start] && target<=arr[mid]) {
					start=mid+1;
				}
				else {
					end=mid-1;
				}
			}
		}
	}

}


20.Second largest:

package arrayProblems;

public class SecondLargest {

	public static void main(String[] args) {
		SecondLargest obj=new SecondLargest();
		obj.start();
	}

	private void start() {
		int[] arr= {3,1,5,7,4,8,8};
		int firstLargest=Integer.MIN_VALUE,secondLargest=Integer.MIN_VALUE;
		for(int i=0;i<arr.length;i++) {
			if(arr[i]>firstLargest) {
				secondLargest=firstLargest;
				firstLargest=arr[i];
			}
			else if(arr[i]>secondLargest && arr[i]!=firstLargest) {
				secondLargest=arr[i];
			}
		}
		System.out.println(secondLargest);
	}

}

22.Second smallest:

package arrayProblems;

public class SecondSmallest {

	public static void main(String[] args) {
		SecondSmallest obj=new SecondSmallest();
		obj.start();
	}

	private void start() {
		int[] arr= {1,-1,-1,7,39,20};
		
		int first=arr[0],second=arr[0];
		
		for(int i=1;i<arr.length;i++) {
			if(arr[i]<first) {
				second=first;
				first=arr[i];			
			}
			else if(arr[i]<second && arr[i]!=first) {
				second=arr[i];
			}
		}
		System.out.println(second);
	}

}

23.Segregate 0's and 1's:

package arrayProblems;

public class Segregate0s1s {

	public static void main(String[] args) {
		Segregate0s1s obj=new Segregate0s1s();
		obj.start();
		
	}

	private void start() {
		int arr[] = {0,1,0,1,0,1,0,1,1,0};
		
		int j=0;
		
		for(int i=0;i<arr.length;i++) {
			if(arr[i]==0) {
				arr[j++]=arr[i];
			}
		}
		while(j<arr.length) {
			arr[j++]=1;
		}
		
		for(int i=0;i<arr.length;i++) {
			System.out.print(arr[i]+ " ");
		}
	}
}

24.Single element:

package arrayProblems;

public class SingleElement {

	public static void main(String[] args) {
		SingleElement obj=new SingleElement();
		obj.start();
	}

	private void start() {
		int[] arr= {1,1,2,2,3,4,4,8,8};
		
		int res=0;
		for(int i=0;i<arr.length;i++) {
			res^=arr[i];
		}
		System.out.println(res);
	}

}


25.Sorted Array Common element:

package arrayProblems;

public class SortedArrayCommon {

	public static void main(String[] args) {
		SortedArrayCommon obj=new SortedArrayCommon();
		obj.start();
	}

	private void start() {
		int[] arr1= {1,5,10,20,40,80};
		int[] arr2= {6,7,20,80,100};
		int[] arr3= {3,4,15,20,30,70,80,120};
		
		int x=0,y=0,z=0;
		while(x<arr1.length && y<arr2.length && z<arr3.length) {
			if(arr1[x]==arr2[y] && arr2[y] ==arr3[z]) {
				System.out.print(arr1[x]+" ");
				x++;
				y++;
				z++;
			}
			else if(arr1[x]>arr2[y]) {
				y++;
			}
			else if(arr2[y]>arr3[z]) {
				z++;
			}
			else {
				x++;
			}
		}
	}

}

